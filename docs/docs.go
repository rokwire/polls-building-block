// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/polls": {
            "get": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Retrieves  all polls by a filter params",
                "tags": [
                    "Client"
                ],
                "operationId": "GetPolls",
                "parameters": [
                    {
                        "description": "body json for defined poll ids as request body",
                        "name": "data",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PollsFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PollResult"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Create a new poll",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "CreatePoll",
                "parameters": [
                    {
                        "description": "body json",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                }
            }
        },
        "/polls/{id}": {
            "get": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Retrieves a poll by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetPoll",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    },
                    "401": {
                        "description": ""
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Updates a reward type with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "UpdatePoll",
                "parameters": [
                    {
                        "description": "body json",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Poll"
                        }
                    },
                    "401": {
                        "description": ""
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Deletes a poll with the specified id",
                "tags": [
                    "Client"
                ],
                "operationId": "DeletePoll",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/polls/{id}/end": {
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Finishes an existing poll with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "EndPoll",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/polls/{id}/events": {
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Subscribes to a poll events as SSE",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "GetPollEvents",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/polls/{id}/start": {
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Starts an existing poll with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "StartPoll",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/polls/{id}/vote": {
            "post": {
                "security": [
                    {
                        "UserAuth": []
                    }
                ],
                "description": "Votes a poll with the specified id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "VotePoll",
                "parameters": [
                    {
                        "description": "body json",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollVote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Gives the service version.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Client"
                ],
                "operationId": "Version",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "Poll": {
            "type": "object",
            "required": [
                "options",
                "question",
                "status",
                "userid",
                "username"
            ],
            "properties": {
                "date_created": {
                    "type": "string"
                },
                "date_updated": {
                    "type": "string"
                },
                "geo_fence": {
                    "type": "boolean"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "multi_choice": {
                    "type": "boolean"
                },
                "options": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "type": "string"
                    }
                },
                "org_id": {
                    "type": "string"
                },
                "pin": {
                    "type": "integer",
                    "maximum": 9999,
                    "minimum": 0
                },
                "question": {
                    "type": "string"
                },
                "repeat": {
                    "type": "boolean"
                },
                "responses": {
                    "type": "array",
                    "maxItems": 0,
                    "items": {
                        "$ref": "#/definitions/PollVote"
                    }
                },
                "results": {
                    "type": "array",
                    "maxItems": 0,
                    "items": {
                        "type": "integer"
                    }
                },
                "show_results": {
                    "type": "boolean"
                },
                "stadium": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "created",
                        "started"
                    ]
                },
                "to_members": {
                    "description": "nil or empty means everyone; non-empty means visible to those user ids",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ToMember"
                    }
                },
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "PollResult": {
            "type": "object",
            "required": [
                "options",
                "question",
                "status",
                "userid",
                "username"
            ],
            "properties": {
                "date_created": {
                    "type": "string"
                },
                "date_updated": {
                    "type": "string"
                },
                "geo_fence": {
                    "type": "boolean"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "multi_choice": {
                    "type": "boolean"
                },
                "options": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "type": "string"
                    }
                },
                "pin": {
                    "type": "integer",
                    "maximum": 9999,
                    "minimum": 0
                },
                "question": {
                    "type": "string"
                },
                "repeat": {
                    "type": "boolean"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "show_results": {
                    "type": "boolean"
                },
                "stadium": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "created",
                        "started"
                    ]
                },
                "to_members": {
                    "description": "nil or empty means everyone; non-empty means visible to those user ids",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ToMember"
                    }
                },
                "total": {
                    "type": "integer"
                },
                "unique_voters_count": {
                    "type": "integer"
                },
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "voted": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "PollVote": {
            "type": "object",
            "required": [
                "answer",
                "userid"
            ],
            "properties": {
                "answer": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "created": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "PollsFilter": {
            "type": "object",
            "properties": {
                "group_ids": {
                    "description": "GroupPolls     *bool    ` + "`" + `json:\"group_polls,omitempty\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "my_polls": {
                    "type": "boolean"
                },
                "offset": {
                    "type": "integer"
                },
                "pin": {
                    "type": "integer"
                },
                "poll_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responded_polls": {
                    "type": "boolean"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ToMember": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "AdminGroupAuth": {
            "type": "apiKey",
            "name": "GROUP",
            "in": "header"
        },
        "AdminUserAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header (add Bearer prefix to the Authorization value)"
        },
        "InternalApiAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header (add INTERNAL-API-KEY with correct value as a header)"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.21",
	Host:             "localhost",
	BasePath:         "/content",
	Schemes:          []string{"https"},
	Title:            "Polls Building Block v2 API",
	Description:      "RoRewards Building Block API Documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
